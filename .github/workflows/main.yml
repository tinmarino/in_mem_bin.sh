---
# yamllint disable rule:line-length

name: "CI: X86"

# yamllint disable-line rule:truthy
on: [push, pull_request, workflow_dispatch]

jobs:
  main:
    name: "X86: ${{ matrix.shell }} on ${{ matrix.image }} mode ${{ matrix.mode }}"

    strategy:
      fail-fast: false
      matrix:
        shell: [bash, zsh, ash, ksh, sh]
        image: [debian, archlinux, alpine]  # Alpine cannot copy
        mode: [sync, async]

    container:
      image: ${{ matrix.image }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install
        run: |
          # Discriminate package name
          apt=""
          case "${{ matrix.shell }}" in
            # Sh do not require install
            sh)
              :
              ;;
            # Ash is called dash
            ash)
              if [ "${{ matrix.image}}" == alpine ] \
                  || [ "${{ matrix.image}}" == archlinux ]; then
                apt=dash
              else
                apt=ash
              fi
              ;;
            ksh)
              if [ "${{ matrix.image}}" == alpine ]; then
                apt=mksh
              else
                apt=ksh
              fi
              ;;
            *)
              apt=${{ matrix.shell }}
              ;;
          esac

          # Discriminate instalation method
          case "${{ matrix.image }}" in
            alpine)
              apk update
              apk add which bash
              apk add coreutils
              apk add xxd
              [ -n "$apt" ] && apk add "$apt"
              [ mksh = "$apt" ] && ln -s /bin/mksh /bin/ksh
              ;;
            debian)
              apt-get update
              apt-get install -y xxd
              [ -n "$apt" ] && apt-get install -y "$apt"
              ;;
            archlinux)
              pacman -Sy --noconfirm which
              pacman -Sy --noconfirm xxd
              [ -n "$apt" ] && pacman -Sy --noconfirm "$apt"
              [ dash = "$apt" ] && ln -s /bin/dash /bin/ash
              ;;
          esac
          # Prepare the error message in case script breaks
          echo "MSG=X" >> $GITHUB_ENV
          echo "COLOR=#ea4a5a" >> $GITHUB_ENV
          exit 0

      - name: Run
        shell: bash
        # continue-on-error: true  # commented as wrong report
        timeout-minutes: 2
        run: |
          ${{ matrix.shell }} test/test_inmembin.sh --${{ matrix.mode}}
          ret=$?
          if [ 0 = "$ret" ]; then
            echo "MSG=O" >> $GITHUB_ENV
            echo "COLOR=#34d058" >> $GITHUB_ENV
          fi

      - name: Create Awesome Badge
        if: always()
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 7b40042f91625feffeaa1941f7aba953
          filename: inmembin_x86_${{ matrix.shell }}_on_${{ matrix.image }}_mode_${{ matrix.mode }}.json
          label: "x86 ${{ matrix.mode }}"
          message: ${{ env.MSG }}
          color: ${{ env.COLOR }}
